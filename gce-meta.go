package mainimport (	"fmt"	"github.com/alexfinn/gce-metadata/cmd"	"gopkg.in/urfave/cli.v1"	"os")func main() {	app := cli.NewApp()	app.EnableBashCompletion = true	app.Name = "gce-meta"	app.Version = "0.2"	app.Usage = "Small and simple utility to get some metadata of project or instance on Google Cloud Engine."	if len(os.Args) < 2 || len(os.Args) > 2 {		app.Action = func(c *cli.Context) error {			cli.ShowAppHelp(c)			return nil		}	}	app.Commands = []cli.Command{		{			Name:     "project-id",			Aliases:  []string{"p"},			Usage:    "The project ID.",			Category: "project",			Action: func(c *cli.Context) error {				id, err := cmd.ProjectID()				if err != nil {					return err				}				fmt.Println(id)				return nil			},		},		{			Name:     "numeric-project-id",			Aliases:  []string{"np"},			Usage:    "The numeric project ID of the instance.",			Category: "project",			Action: func(c *cli.Context) error {				id, err := cmd.NumericProjectID()				if err != nil {					return err				}				fmt.Println(id)				return nil			},		},		{			Name:     "desc",			Usage:    "The free-text description of an instance, assigned using the --description flag, or set in the API.",			Category: "instance",			Action: func(c *cli.Context) error {				desc, err := cmd.Description()				if err != nil {					return err				}				fmt.Println(desc)				return nil			},		},		{			Name:     "hostname",			Usage:    "The full host name of the instance.",			Category: "instance",			Action: func(c *cli.Context) error {				hostname, err := cmd.Hostname()				if err != nil {					return err				}				fmt.Println(hostname)				return nil			},		},		{			Name:     "instance-name",			Aliases:  []string{"name"},			Usage:    "The short host name of the instance.",			Category: "instance",			Action: func(c *cli.Context) error {				name, err := cmd.InstanceName()				if err != nil {					return err				}				fmt.Println(name)				return nil			},		},		{			Name:     "instance-id",			Aliases:  []string{"id"},			Usage:    "The ID of the instance. This is a unique, numerical ID that is generated by Google Compute Engine.",			Category: "instance",			Action: func(c *cli.Context) error {				id, err := cmd.InstanceID()				if err != nil {					return err				}				fmt.Println(id)				return nil			},		},		{			Name:     "machine-type",			Aliases:  []string{"mt"},			Usage:    "The fully-qualified machine type name of the instance's host machine.",			Category: "instance",			Action: func(c *cli.Context) error {				machine, err := cmd.MachineType()				if err != nil {					return err				}				fmt.Println(machine)				return nil			},		},		{			Name:     "zone",			Usage:    "The instance's zone.",			Category: "instance",			Action: func(c *cli.Context) error {				zone, err := cmd.Zone()				if err != nil {					return err				}				fmt.Println(zone)				return nil			},		},		{			Name:     "internal-ip",			Aliases:  []string{"iip"},			Usage:    "Internal IP of instance.",			Category: "instance",			Action: func(c *cli.Context) error {				ip, err := cmd.InternalIP()				if err != nil {					return err				}				fmt.Println(ip)				return nil			},		},		{			Name:     "external-ip",			Aliases:  []string{"eip"},			Usage:    "External IP of instance.",			Category: "instance",			Action: func(c *cli.Context) error {				ip, err := cmd.ExternalIP()				if err != nil {					return err				}				fmt.Println(ip)				return nil			},		},		{			Name:     "tags",			Aliases:  []string{"t"},			Usage:    "Any tags associated with the instance.",			Category: "instance",			Action: func(c *cli.Context) error {				tags, err := cmd.InstanceTags()				if err != nil {					return err				}				fmt.Println(tags)				return nil			},		},		{			Name:     "attr",			Aliases:  []string{"a"},			Usage:    "Attributes passed to the instance during startup or shutdown.",			Category: "instance",			Subcommands: []cli.Command{				{					Name:  "get",					Usage: "Get attribute's value.",					Action: func(c *cli.Context) error {						value, err := cmd.InstanceAttributeValue(c.Args().First())						if err != nil {							return err						}						fmt.Println(value)						return nil					},				},			},			Action: func(c *cli.Context) error {				attr, err := cmd.InstanceAttributes()				if err != nil {					return err				}				fmt.Println(attr)				return nil			},		},	}	app.Run(os.Args)}